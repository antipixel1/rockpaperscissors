/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package RPSGame;
import java.util.Random;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import java.awt.Dimension;
import javax.swing.ImageIcon;
import java.lang.Math;
import Controller.RPSGameController;
/**
 *
 * @author Derek
 */
public class RPSGameWindow extends javax.swing.JFrame {
    int object_amount = 50; //default=50
    private JLabel[] objects;
    private int[] object_type_counts;
    RPSGameController game_thread;
    Random rand;
    private boolean startSim = false;
    private boolean resetSim = true;
    /**
     * Creates new form RPSGameWindow
     */
    public RPSGameWindow() {
        initComponents();
        game_thread = new RPSGameController(this);
        game_thread.start();
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("RockPaperScissorsSim");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 600, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 570, Short.MAX_VALUE)
        );

        jLabel1.setText("RPS amount:");

        jTextField1.setText("50");
        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });

        jButton1.setText("Start Simulation");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Refresh");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButton1)
                .addGap(18, 18, 18)
                .addComponent(jButton2)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 7, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButton1))
                    .addComponent(jButton2)))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents
    public boolean check_uniform_class(){
        return (object_type_counts[0]==0 && object_type_counts[1]==0) ||
               (object_type_counts[0]==0 && object_type_counts[2]==0) ||
               (object_type_counts[1]==0 && object_type_counts[2]==0);
    }
    public void stepSimulation(){
        for (int i=0; i<objects.length; i++){
            boolean salir = false;
            for (int j=0; j<objects.length && !salir; j++){
                double distance = Math.sqrt((objects[j].getX()-objects[i].getX())*(objects[j].getX()-objects[i].getX())
                +(objects[j].getY()-objects[i].getY())*(objects[j].getY()-objects[i].getY()));
                if (distance <=70) {
                    int first_obj_type = Integer.parseInt(objects[i].getName());
                    int second_obj_type = Integer.parseInt(objects[j].getName());
                    switch(first_obj_type){
                        case 0:
                            if (second_obj_type==2){ //rock beats scissors
                                objects[j].setName("0");
                                ImageIcon imgrock = new ImageIcon(getClass().getResource("/img/rock.png"));
                                objects[j].setIcon(imgrock);
                                object_type_counts[0] += 1;
                                object_type_counts[2] -= 1;
                            }
                            break;
                        case 1: //paper beats rock
                            if (second_obj_type == 0){
                                objects[j].setName("1");
                                ImageIcon imgpaper = new ImageIcon(getClass().getResource("/img/paper.png"));
                                objects[j].setIcon(imgpaper);
                                object_type_counts[1] += 1;
                                object_type_counts[0] -= 1;
                            }
                            break;
                        case 2: //scissors beats paper
                            if (second_obj_type == 1) {
                                objects[j].setName("2");
                                ImageIcon imgscissors = new ImageIcon(getClass().getResource("/img/scissors.png"));
                                objects[j].setIcon(imgscissors);
                                object_type_counts[2] += 1;
                                object_type_counts[1] -= 1;
                            }
                            break;
                    }
                }
            }
            //Now move the object by a defined amount, maybe change to random after testing
            int movesX = rand.nextInt(2);
            int movesY = rand.nextInt(2);
            Dimension size = objects[i].getPreferredSize();
            objects[i].setBounds(((objects[i].getX()+10)*movesX)%(jPanel1.getHeight()-50), 
            ((objects[i].getY()+10)*movesY)%(jPanel1.getWidth()-80), size.width, size.height);
        }
        jPanel1.repaint();
        //JOptionPane.showMessageDialog(null, "Piedras: "+object_type_counts[0]+ " Papeles: "+object_type_counts[1]+ " Tijeras: "
                //+ object_type_counts[2]);
    }
    public void controlSim(){
        if (this.resetSim){
            this.generateElements();
            resetSim = false;
        }
        if (startSim){
            if (!check_uniform_class()){
                this.stepSimulation();
            }else{
                this.startSim=false;
            }
        }
    }
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        this.startSim = true;
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        generateElements();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField1ActionPerformed
    public void generateElements(){
        jPanel1.removeAll();
        int parsed_amount = 50;
        try{
            parsed_amount = Integer.parseInt(jTextField1.getText());
        }catch(NumberFormatException e){
            JOptionPane.showMessageDialog(null, "Ingrese una cantidad de objetos mayor o igual a 1");
        }
        if (parsed_amount>0){
            object_amount = parsed_amount;
        }
        objects = new JLabel[object_amount];
        object_type_counts = new int[3]; 
        //JOptionPane.showMessageDialog(null, "Cantidad actual: "+object_amount);
        rand = new Random();
        for (int i=0; i<object_amount; i++) {
            int type = rand.nextInt(3);
            String imagePath = "";
            switch (type) {
                case 0: {
                    imagePath = "/img/rock.png";
                    break;
                }
                case 1: {
                    imagePath = "/img/paper.png";
                    break;
                }
                case 2: {
                    imagePath = "/img/scissors.png";
                    break;
                }
            }
            ImageIcon img = new ImageIcon(getClass().getResource(imagePath));
            objects[i] = new JLabel("");
            objects[i].setIcon(img);
            objects[i].setName(""+type);
            Dimension size = objects[i].getPreferredSize();
            objects[i].setBounds(rand.nextInt(jPanel1.getHeight()-50), rand.nextInt(jPanel1.getWidth()-80), size.width, size.height);
            object_type_counts[type] += 1;
            jPanel1.add(objects[i]);
        }
        jPanel1.repaint();
    }
    private void start_sim(){
        
    }
    private void check_object_types(){ //bounds:600 570
        
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(RPSGameWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(RPSGameWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(RPSGameWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(RPSGameWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new RPSGameWindow().setVisible(true);
                
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables
}
